## Follow properites have their values assigned via 'overrides' environment variables of config server docker.
## DO NOT define these in any of the property files.  They must be passed as env variables.  Refer to config-server
## helm chart:
## db.dbuser.password 
## mosip.partner.client.secret
## mosip.pms.client.secret
## keycloak.internal.url
## keycloak.admin.password
## mosip.api.public.url

## Database
## Database hostname below is assuming postgres is running inside cluster in 'postgres' namespace
## If database is external to production, provide the DNS or ip of the host and port 
mosip.pmp.database.hostname=postgres-postgresql.postgres
mosip.pmp.database.port=5432
mosip.pmp.database.user=pmsuser
mosip.pmp.database.password=${db.dbuser.password}

## Auth device
mosip.authdevice.database.hostname=postgres
mosip.authdevice.database.port=80
mosip.authdevice.database.user=authdeviceuser
mosip.authdevice.database.password=${db.dbuser.password}

## Reg device
mosip.regdevice.database.hostname=postgres
mosip.regdevice.database.port=80
mosip.regdevice.database.user=regdeviceuser
mosip.regdevice.database.password=${db.dbuser.password}

## Hibernate
javax.persistence.jdbc.driverClassName=org.postgresql.Driver
javax.persistence.jdbc.driver=org.postgresql.Driver
javax.persistence.jdbc.url=jdbc:postgresql://${mosip.pmp.database.hostname}:${mosip.pmp.database.port}/mosip_pms
javax.persistence.jdbc.user=${mosip.pmp.database.user}
javax.persistence.jdbc.username=${mosip.pmp.database.user}
javax.persistence.jdbc.password=${mosip.pmp.database.password}
javax.persistence.jdbc.schema = pms
javax.persistence.jdbc.uinHashTable=uin_hash_salt
javax.persistence.jdbc.uinEncryptTable=uin_encrypt_salt

## Hibernate Auth device
mosip.datasource.authdevice.jdbc.driver=org.postgresql.Driver
mosip.datasource.authdevice.jdbc.url = jdbc:postgresql://${mosip.authdevice.database.hostname}:${mosip.authdevice.database.port}/mosip_authdevice
mosip.datasource.authdevice.jdbc.password = ${mosip.authdevice.database.password}
mosip.datasource.authdevice.jdbc.user = ${mosip.authdevice.database.user}
mosip.datasource.authdevice.jdbc.schema = authdevice
mosip.datasource.authdevice.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect

## Hibernate Reg device
mosip.datasource.regdevice.jdbc.driver=org.postgresql.Driver
mosip.datasource.regdevice.jdbc.url = jdbc:postgresql://${mosip.regdevice.database.hostname}:${mosip.regdevice.database.port}/mosip_regdevice
mosip.datasource.regdevice.jdbc.password = ${mosip.regdevice.database.password}
mosip.datasource.regdevice.jdbc.user = ${mosip.regdevice.database.user}
mosip.datasource.regdevice.jdbc.schema = regdevice
mosip.datasource.regdevice.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect

hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect
hibernate.jdbc.lob.non_contextual_creation=true
hibernate.hbm2ddl.auto=none
hibernate.show_sql=false
hibernate.format_sql=false
hibernate.connection.charSet=utf8
hibernate.cache.use_second_level_cache=false
hibernate.cache.use_query_cache=false
hibernate.cache.use_structured_entries=false
hibernate.generate_statistics=false
spring.datasource.initialization-mode=never

## This property is used by kernel-authcodeflowproxy-api to check request is coming from allowed urls not.
auth.allowed.urls=https://${mosip.pmp.host}/

## Application ID of PMP. Used to upload other domain certs
application.id=PARTNER
application.name=partner

## To configure the length of the misp license key
mosip.kernel.idgenerator.misp.license-key-length = 50
## To configure the partner types for which extractors are required. It should be "," separated.
pmp.bioextractors.required.partner.types = Credential_Partner,Online_Verification_Partner
mosip.pmp.misp.license.expiry.period.indays = 90
mosip.pmp.partner.policy.expiry.period.indays = 90
pmp.policy.expiry.period.indays = 180
pmp.policy.schema.url= https://schemas.mosip.io/v1/auth-policy

## To configure what are the allowed policy types.
## If we add any new policy type, corresponding schema also needs to be added.
## format for adding schema configuration for new policy type is as below
## pmp.policyTypeName.policy.schema(all are in lowercase)= schema url
pmp.allowed.policy.types=Auth,DataShare,CredentialIssuance
pmp.auth.policy.schema = ${mosip.kernel.xsdstorage-uri}auth-policy-schema.json
pmp.datashare.policy.schema=${mosip.kernel.xsdstorage-uri}data-share-policy-schema.json
pmp.credentialissuance.policy.schema=${mosip.kernel.xsdstorage-uri}data-share-policy-schema.json

pmp.misp.valid.email.address.regex=^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$
pmp.partner.valid.email.address.regex=^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$
pmp.partner.partnerId.max.length=36
pmp.partner.mobileNumbe.max.length=16

## Keymanager
mosip.kernel.sign-url=${mosip.kernel.keymanager.url}/v1/keymanager/jwtSign
## Kernel services
mosip.kernel.masterdata.audit-url=${mosip.kernel.auditmanager.url}/v1/auditmanager/audits

# ApplicationId for partner
mosip.pmp.auth.appId=partner
# Kernel auth client ID for partner management services
mosip.pmp.auth.clientId=mosip-partner-client
# Kernel auth secret key for partner management services
mosip.pmp.auth.secretKey=${mosip.partner.client.secret}
# Key manager service API's to upload certificates
pms.cert.service.token.request.clientId=${mosip.pmp.auth.clientId}
pms.cert.service.token.request.issuerUrl=${mosip.kernel.authmanager.url}/v1/authmanager/authenticate/clientidsecretkey
pmp.ca.certificaticate.upload.rest.uri=${mosip.kernel.keymanager.url}/v1/keymanager/uploadCACertificate
pmp.partner.certificaticate.upload.rest.uri=${mosip.kernel.keymanager.url}/v1/keymanager/uploadPartnerCertificate
pmp.partner.certificaticate.get.rest.uri=${mosip.kernel.keymanager.url}/v1/keymanager/getPartnerCertificate/{partnerCertId}
pmp-keymanager.upload.other.domain.cert.rest.uri=${mosip.kernel.keymanager.url}/v1/keymanager/uploadOtherDomainCertificate

#Auth token generation
mosip.iam.adapter.clientid=${mosip.pmp.auth.clientId}
mosip.iam.adapter.clientsecret=${mosip.pmp.auth.secretKey}
mosip.iam.adapter.appid=${mosip.pmp.auth.appId}

# Used to get data share url to publish to websub
pmp.certificaticate.datashare.rest.uri=${mosip.datashare.url}/v1/datashare/create
# Used for generating the datashare url
pms.certs.datashare.policyId=mpolicy-default-cert
pms.certs.datashare.subscriberId=mpartner-default-cert

## Keycloak
# These configurations are used to create user in keycloak and map to a role.
# Pre-Condition: All partner types should be created as roles in keycloak.

mosip.iam.realm.operations.base-url = ${keycloak.internal.url}/auth/admin/realms/{realmId}
mosip.iam.admin-url =${keycloak.internal.url}/auth/admin/
mosip.iam.admin-realm-id =admin
mosip.iam.roles-extn-url =realms/mosip/roles
mosip.iam.users-extn-url = realms/mosip/users
mosip.iam.role-user-mapping-url =/{userId}/role-mappings/realm
mosip.iam.open-id-url =${keycloak.internal.url}/auth/realms/{realmId}/protocol/openid-connect/
mosip.iam.master.realm-id=master
mosip.iam.default.realm-id=mosip
mosip.keycloak.admin.client.id=admin-cli
mosip.keycloak.admin.user.id=admin
mosip.keycloak.admin.secret.key=${keycloak.admin.password}

## Auth adapter
auth.server.validate.url=${mosip.kernel.authmanager.url}/v1/authmanager/authorize/admin/validateToken
auth.server.admin.validate.url=${mosip.kernel.authmanager.url}/v1/authmanager/authorize/admin/validateToken
auth.server.admin.allowed.audience=mosip-creser-client,mosip-datsha-client,mosip-ida-client,mosip-regproc-client,mosip-admin-client,mosip-reg-client,mosip-pms-client,mosip-resident-client,mosip-idrepo-client,mosip-partner-client,mosip-deployment-client
auth.jwt.secret=authjwtsecret
auth.jwt.base=Mosip-Token

mosip.iam.adapter.issuerURL=${keycloak.internal.url}/auth/realms/mosip
mosip.authmanager.client-token-endpoint=${mosip.kernel.authmanager.url}/v1/authmanager/authenticate/clientidsecretkey
# in minutes
mosip.iam.adapter.validate-expiry-check-rate=15
# in minutes
mosip.iam.adapter.renewal-before-expiry-interval=15
#this should be false if you don't use this restTemplate true if you do
mosip.iam.adapter.self-token-renewal-enable=true
mosip.auth.filter_disable=false

#To populate required roles which should be allowed in UI.(Roles are nothing but partner types)
mosip.pms.ui.required.roles=AUTH_PARTNER,DEVICE_PROVIDER,CREDENTIAL_PARTNER,FTM_PROVIDER,MISP_PARTNER,PARTNERMANAGER,POLICYMANAGER,PARTNER_ADMIN

# To configure misp partner type
mosip.pms.misp.partner.type=MISP_Partner

# Role for partner admin =
mosip.pms.partneradmin.role=PARTNER_ADMIN

## Security
mosip.security.csrf-enable:false
mosip.security.secure-cookie:false

partner.search.maximum.rows=10

## Allowed credential types which partner can map against to policy
pmp.allowed.credential.types=auth,qrcode,euin,reprint,vercred,opencrvs

## Allowed partner types who can map policies to credential types
policy.credential.type.mapping.allowed.partner.types=Credential_Partner,Online_Verification_Partner

## Allowed kyc attributes. Used to display in UI
policy.allowed.kyc.attributes = {"fullName": "Full Name","middleName": "Middle Name","lastName": "Last Name","dateOfBirth": "DateOfBirth","gender": "Gender","phone": "phone"}
## Used to display in UI
policy.auth.allowed.token.types=random,partner,policy

# IAM
mosip.iam.module.login_flow.name=authorization_code
mosip.iam.module.clientID=mosip-partner-client
mosip.iam.module.clientsecret=${mosip.partner.client.secret}
mosip.iam.module.redirecturi=${mosip.api.internal.url}/v1/partnermanager/login-redirect/
mosip.iam.module.login_flow.scope=email
mosip.iam.module.login_flow.response_type=code
mosip.iam.authorization_endpoint=${keycloak.external.url}/auth/realms/mosip/protocol/openid-connect/auth
mosip.iam.module.admin_realm_id=mosip
mosip.pms.filtervalue.max_columns =100
mosip.iam.token_endpoint=${keycloak.internal.url}/auth/realms/mosip/protocol/openid-connect/token

## Unused properties. TODO: delete them once they are removed from code
pmp.policy.allowed.authtokens.types=random,partner,policy
mosip.kernel.device.search-url=${mosip.kernel.masterdata.url}/v1/masterdata/devices/search
token.request.appid=admin
token.request.password=mosip
token.request.username=110005
token.request.version=string
token.request.id=v1
token.request.issuerUrl=${mosip.kernel.authmanager.url}/v1/authmanager/authenticate/clientidsecretkey
token.request.clientId=admin
PASSWORDBASEDTOKENAPI=${mosip.kernel.authmanager.url}/v1/authmanager/authenticate/useridPwd
application.env.local=false

# Notifications
emailResourse.url=${mosip.kernel.notification.url}/v1/notifier/email/send
resource.template.url=${mosip.kernel.masterdata.url}/v1/masterdata/templates/{langcode}/{templatetypecode}
notifications.sent.before.days = 3
partner.registration.sub-template = partner-reg-sub-template
partner.reg.content-template=partner-reg-content-template
partner.status.sub-template=partner-status-sub-template
partner.status.content-template=partner-status-content-template
partner.apikey.status.sub-template=partner-apikey-status-sub-template
apikey.status.content-template=apikey-status-content-template
pms.notifications-schedule.init-delay = 24
pms.notifications-schedule.fixed-rate=24

partner.register.as.user.in.iam.enable=false

# query param usd to refer url to redirect after logout
mosip.iam.post-logout-uri-param-key=post_logout_redirect_uri
# end session endpoint in OIDC
mosip.iam.end-session-endpoint-path=/protocol/openid-connect/logout